zbior_ary.h:

9:  int * second_ele; // [Greg] Czy to nie powinno być 'last_ele'?


zbior_ary.c:

199: zbior_ary suma(zbior_ary A,zbior_ary B) // [Gerg] Ta funkcja jest zdecydowanie za długa. 
						// Generalnie nie jest źle. Coś się da przeczytać. Nie miałbym nic przeciwko spacjom po przecinkach w argumentach funkcji.
						// Tak sobie myślę, że wartoby opisać cały proces chodzenia po tych resztach (ja robiłem podobnie, więc się połapałem, ale gdyby 
						// robić tego zadania wcześniej, to byłoby ciężko.

	201:     int finger_A=0,finger_B=0,last_to_copy,indeks_res=0; // [Greg] Potrzebny komentarz co robią te zmienne. Czytam funkcję i nie mam pojęcia.
								     // Indeks po angielsku to index :P (btw zdecyduj się na język)
								     
	204:     while( (finger_A < A.len) && (finger_B < B.len) ){ // [Greg] Ta pętla jest zdecydowanie za długa.

	205:       if( A.modulo_q[finger_A] == B.modulo_q[finger_B] ){ // [Greg] Ten if jest za długi.

	222:       if(indeks_res - 1 >= 0){ // [Greg] Linijka 223 jest zdecydowanie za długa. Cały ten if to blok tekstu, którego nie da się przeczytać. (223, 224).


258: zbior_ary roznica(zbior_ary A,zbior_ary B){ // [Greg] Już lepiej, podobne uwagi, co poprzednio. Za długi while, za długa funkcja


332: zbior_ary iloczyn(zbior_ary A,zbior_ary B){ // [Greg] Dużo legiej, akceptowalne długości, trochę mało komentarzy (nie wiadomo co to robi). W sumie ten while trochę długi, ale ok.

379: unsigned ary(zbior_ary A){ // [Greg] Brakuje komentarzy

383: unsigned moc(zbior_ary A){ // [Greg] Brakuje komentarzy




147: void copy_ele(zbior_ary *Result,zbior_ary X,int p,int k,int *indeks_res){//kopiuje elementy na indeksach od p do k ze zbioru X do Result
	// [Greg] Zdecydowanie za długie linijki. Nie widać co się dzieje w śroku. W przypadku bugu nie do odbugowania. Brak komentarzy



62: zbior_ary free_unused_memory(zbior_ary *Result){ // [Greg] Do tego jest funkcja realloc(). Jeśli wiesz ile jest ziomków w przedziale to możesz ją z powodzeniem użyć.
							// To znacznie ułatwi implementację tego.

++ Jak masz takie coś:
int maximum(int a,int b){
    if(a>b){
        return a;
    }
    else{
        return b;
    }
}, 
to możesz zrobić:
int maximum(int a,int b){
    if(a>b)
        return a;
    return b;
}
Wiem, że lubisz krótszy kod :).

Generalnie ładnie. Małe podsumowanie:
	-> Zbyt długie funkcje trzeba podzielić
	-> Zbyt długie while trzeba podzielić
	-> Zbyt długie ify trzeba podzielić.
	-> Zbyt długie linijki trzeba podzielić.
	-> Polski albo angielski
	-> Komentarze tam, gdzie ich brakuje. (Wyobraź sobie, że masz to przeczytać ;))
	-> Jak nadasz sensowne nazwy tam, gdzie jest za długo, to nawet tak dużo komentarzy nie będzie trzeba.
